plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.13.3'
    id 'biz.aQute.bnd.builder' version "$bndVersion"
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'groovy'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.codehaus.groovy:groovy-all:$groovyVersion",
            'javax.servlet:javax.servlet-api:3.1.0'

    implementation 'org.osgi:osgi.core:6.0.0',
            'org.osgi:org.osgi.service.component.annotations:1.5.0',
            'org.osgi:org.osgi.service.metatype.annotations:1.4.1',
            'org.osgi:org.osgi.annotation:6.0.0',
            'org.apache.sling:org.apache.sling.commons.osgi:2.4.2'

    // keycloak
    implementation "org.keycloak:keycloak-servlet-filter-adapter:$keycloakVersion"

    // httpclient
    implementation 'org.apache.httpcomponents:httpclient-osgi:4.5.13',
            "org.apache.sling:org.apache.sling.servlets.annotations:1.2.6",
            "org.apache.sling:org.apache.sling.api:$slingApiVersion"

    // rewriter
    implementation 'org.apache.sling:org.apache.sling.rewriter:1.3.2'

    compileOnly "org.mnode.ical4j:ical4j:$ical4jVersion"

    testImplementation "org.codehaus.groovy:groovy:$groovyVersion",
            'net.sourceforge.nekohtml:nekohtml:1.9.22'

    testImplementation platform("org.spockframework:spock-bom:2.0-M4-groovy-3.0"),
            "org.spockframework:spock-core",
            "org.slf4j:slf4j-log4j12:$slf4jVersion",
            "org.apache.logging.log4j:log4j:$log4jVersion"
}

scmVersion {
    tag {
        prefix = 'whistlepost-scripting-groovy-'
    }
    versionCreator 'versionWithBranch'
    branchVersionCreator = ['main': 'simple']
    nextVersion {
        suffix = 'pre'
        separator = '-'
    }
}

sourceCompatibility = 8
targetCompatibility = 8

group = 'org.whistlepost'
version = rootProject.scmVersion.version
description = 'Support for scripting using the Groovy Markup Template Engine'

ext {
    isReleaseVersion = !version.endsWith("SNAPSHOT")
}

test {
    useJUnitPlatform()
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

publishing {
    publications {
        "$name"(MavenPublication) {
            from components.java
            artifact javadocJar
            artifact sourcesJar
            pom.withXml {
                asNode().appendNode('name', name)
                asNode().appendNode('description', description)
                asNode().appendNode('url', 'https://www.whistlepost.org')

                def scmNode = asNode().appendNode('scm')
                scmNode.appendNode('url', 'https://github.com/whistlepost/whistlepost-scripting-groovy')
                scmNode.appendNode('connection', 'scm:git@github.com:whistlepost/whistlepost-scripting-groovy.git')
                scmNode.appendNode('developerConnection', 'scm:git@github.com:whistlepost/whistlepost-scripting-groovy.git')

                def licenseNode = asNode().appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', 'Apache License')
                licenseNode.appendNode('url', 'https://raw.githubusercontent.com/whistlepost/whistlepost/master/LICENSE')
                licenseNode.appendNode('distribution', 'repo')

                def developerNode = asNode().appendNode('developers').appendNode('developer')
                developerNode.appendNode('id', 'fortuna')
                developerNode.appendNode('name', 'Ben Fortuna')
            }
        }
    }

    repositories {
        maven {
            name = "OSSRH"
            url = version.endsWith('SNAPSHOT') ? "https://oss.sonatype.org/content/repositories/snapshots/" :
                    "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}

signing {
    required { isReleaseVersion }
    sign publishing.publications[name]
}
